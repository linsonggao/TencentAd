<?php
/**
 * AssetPrePermissionsGetListStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZzyLsg\TencentAds\Model;

use \ArrayAccess;
use \ZzyLsg\TencentAds\ObjectSerializer;

/**
 * AssetPrePermissionsGetListStruct Class Doc Comment
 *
 * @category Class
 * @description 返回结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssetPrePermissionsGetListStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssetPrePermissionsGetListStruct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountId' => 'int',
        'ownerAccountId' => 'int',
        'assetId' => 'int',
        'assetName' => 'string',
        'assetType' => '\TencentAds\Model\AssetType',
        'pathId' => 'int',
        'pathType' => '\TencentAds\Model\PathType',
        'isGrantedAll' => '\TencentAds\Model\GrantAllType',
        'grantTime' => 'int',
        'permissionList' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountId' => 'int64',
        'ownerAccountId' => 'int64',
        'assetId' => 'int64',
        'assetName' => null,
        'assetType' => null,
        'pathId' => 'int64',
        'pathType' => null,
        'isGrantedAll' => null,
        'grantTime' => 'int64',
        'permissionList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'account_id',
        'ownerAccountId' => 'owner_account_id',
        'assetId' => 'asset_id',
        'assetName' => 'asset_name',
        'assetType' => 'asset_type',
        'pathId' => 'path_id',
        'pathType' => 'path_type',
        'isGrantedAll' => 'is_granted_all',
        'grantTime' => 'grant_time',
        'permissionList' => 'permission_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'ownerAccountId' => 'setOwnerAccountId',
        'assetId' => 'setAssetId',
        'assetName' => 'setAssetName',
        'assetType' => 'setAssetType',
        'pathId' => 'setPathId',
        'pathType' => 'setPathType',
        'isGrantedAll' => 'setIsGrantedAll',
        'grantTime' => 'setGrantTime',
        'permissionList' => 'setPermissionList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'ownerAccountId' => 'getOwnerAccountId',
        'assetId' => 'getAssetId',
        'assetName' => 'getAssetName',
        'assetType' => 'getAssetType',
        'pathId' => 'getPathId',
        'pathType' => 'getPathType',
        'isGrantedAll' => 'getIsGrantedAll',
        'grantTime' => 'getGrantTime',
        'permissionList' => 'getPermissionList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['ownerAccountId'] = isset($data['ownerAccountId']) ? $data['ownerAccountId'] : null;
        $this->container['assetId'] = isset($data['assetId']) ? $data['assetId'] : null;
        $this->container['assetName'] = isset($data['assetName']) ? $data['assetName'] : null;
        $this->container['assetType'] = isset($data['assetType']) ? $data['assetType'] : null;
        $this->container['pathId'] = isset($data['pathId']) ? $data['pathId'] : null;
        $this->container['pathType'] = isset($data['pathType']) ? $data['pathType'] : null;
        $this->container['isGrantedAll'] = isset($data['isGrantedAll']) ? $data['isGrantedAll'] : null;
        $this->container['grantTime'] = isset($data['grantTime']) ? $data['grantTime'] : null;
        $this->container['permissionList'] = isset($data['permissionList']) ? $data['permissionList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int|mixed
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int|mixed $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets ownerAccountId
     *
     * @return int|mixed
     */
    public function getOwnerAccountId()
    {
        return $this->container['ownerAccountId'];
    }

    /**
     * Sets ownerAccountId
     *
     * @param int|mixed $ownerAccountId ownerAccountId
     *
     * @return $this
     */
    public function setOwnerAccountId($ownerAccountId)
    {
        $this->container['ownerAccountId'] = $ownerAccountId;

        return $this;
    }

    /**
     * Gets assetId
     *
     * @return int|mixed
     */
    public function getAssetId()
    {
        return $this->container['assetId'];
    }

    /**
     * Sets assetId
     *
     * @param int|mixed $assetId assetId
     *
     * @return $this
     */
    public function setAssetId($assetId)
    {
        $this->container['assetId'] = $assetId;

        return $this;
    }

    /**
     * Gets assetName
     *
     * @return string|mixed
     */
    public function getAssetName()
    {
        return $this->container['assetName'];
    }

    /**
     * Sets assetName
     *
     * @param string|mixed $assetName assetName
     *
     * @return $this
     */
    public function setAssetName($assetName)
    {
        $this->container['assetName'] = $assetName;

        return $this;
    }

    /**
     * Gets assetType
     *
     * @return \TencentAds\Model\AssetType|mixed
     */
    public function getAssetType()
    {
        return $this->container['assetType'];
    }

    /**
     * Sets assetType
     *
     * @param \TencentAds\Model\AssetType|mixed $assetType assetType
     *
     * @return $this
     */
    public function setAssetType($assetType)
    {
        $this->container['assetType'] = $assetType;

        return $this;
    }

    /**
     * Gets pathId
     *
     * @return int|mixed
     */
    public function getPathId()
    {
        return $this->container['pathId'];
    }

    /**
     * Sets pathId
     *
     * @param int|mixed $pathId pathId
     *
     * @return $this
     */
    public function setPathId($pathId)
    {
        $this->container['pathId'] = $pathId;

        return $this;
    }

    /**
     * Gets pathType
     *
     * @return \TencentAds\Model\PathType|mixed
     */
    public function getPathType()
    {
        return $this->container['pathType'];
    }

    /**
     * Sets pathType
     *
     * @param \TencentAds\Model\PathType|mixed $pathType pathType
     *
     * @return $this
     */
    public function setPathType($pathType)
    {
        $this->container['pathType'] = $pathType;

        return $this;
    }

    /**
     * Gets isGrantedAll
     *
     * @return \TencentAds\Model\GrantAllType|mixed
     */
    public function getIsGrantedAll()
    {
        return $this->container['isGrantedAll'];
    }

    /**
     * Sets isGrantedAll
     *
     * @param \TencentAds\Model\GrantAllType|mixed $isGrantedAll isGrantedAll
     *
     * @return $this
     */
    public function setIsGrantedAll($isGrantedAll)
    {
        $this->container['isGrantedAll'] = $isGrantedAll;

        return $this;
    }

    /**
     * Gets grantTime
     *
     * @return int|mixed
     */
    public function getGrantTime()
    {
        return $this->container['grantTime'];
    }

    /**
     * Sets grantTime
     *
     * @param int|mixed $grantTime grantTime
     *
     * @return $this
     */
    public function setGrantTime($grantTime)
    {
        $this->container['grantTime'] = $grantTime;

        return $this;
    }

    /**
     * Gets permissionList
     *
     * @return string[]|mixed
     */
    public function getPermissionList()
    {
        return $this->container['permissionList'];
    }

    /**
     * Sets permissionList
     *
     * @param string[]|mixed $permissionList permissionList
     *
     * @return $this
     */
    public function setPermissionList($permissionList)
    {
        $this->container['permissionList'] = $permissionList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


