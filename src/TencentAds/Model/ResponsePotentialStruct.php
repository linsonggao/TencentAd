<?php
/**
 * ResponsePotentialStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZzyLsg\TencentAds\Model;

use \ArrayAccess;
use \ZzyLsg\TencentAds\ObjectSerializer;

/**
 * ResponsePotentialStruct Class Doc Comment
 *
 * @category Class
 * @description 潜力广告信息
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponsePotentialStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'response_potential_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'partitionTime' => 'string',
        'bidRaiseRatio' => 'int',
        'exposureEstimate' => 'int',
        'exposureRaiseRatio' => 'int',
        'bidModified' => 'bool',
        'deepBidModified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'partitionTime' => null,
        'bidRaiseRatio' => 'int64',
        'exposureEstimate' => 'int64',
        'exposureRaiseRatio' => 'int64',
        'bidModified' => null,
        'deepBidModified' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partitionTime' => 'partition_time',
        'bidRaiseRatio' => 'bid_raise_ratio',
        'exposureEstimate' => 'exposure_estimate',
        'exposureRaiseRatio' => 'exposure_raise_ratio',
        'bidModified' => 'bid_modified',
        'deepBidModified' => 'deep_bid_modified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'partitionTime' => 'setPartitionTime',
        'bidRaiseRatio' => 'setBidRaiseRatio',
        'exposureEstimate' => 'setExposureEstimate',
        'exposureRaiseRatio' => 'setExposureRaiseRatio',
        'bidModified' => 'setBidModified',
        'deepBidModified' => 'setDeepBidModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'partitionTime' => 'getPartitionTime',
        'bidRaiseRatio' => 'getBidRaiseRatio',
        'exposureEstimate' => 'getExposureEstimate',
        'exposureRaiseRatio' => 'getExposureRaiseRatio',
        'bidModified' => 'getBidModified',
        'deepBidModified' => 'getDeepBidModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['partitionTime'] = isset($data['partitionTime']) ? $data['partitionTime'] : null;
        $this->container['bidRaiseRatio'] = isset($data['bidRaiseRatio']) ? $data['bidRaiseRatio'] : null;
        $this->container['exposureEstimate'] = isset($data['exposureEstimate']) ? $data['exposureEstimate'] : null;
        $this->container['exposureRaiseRatio'] = isset($data['exposureRaiseRatio']) ? $data['exposureRaiseRatio'] : null;
        $this->container['bidModified'] = isset($data['bidModified']) ? $data['bidModified'] : null;
        $this->container['deepBidModified'] = isset($data['deepBidModified']) ? $data['deepBidModified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets partitionTime
     *
     * @return string|mixed
     */
    public function getPartitionTime()
    {
        return $this->container['partitionTime'];
    }

    /**
     * Sets partitionTime
     *
     * @param string|mixed $partitionTime partitionTime
     *
     * @return $this
     */
    public function setPartitionTime($partitionTime)
    {
        $this->container['partitionTime'] = $partitionTime;

        return $this;
    }

    /**
     * Gets bidRaiseRatio
     *
     * @return int|mixed
     */
    public function getBidRaiseRatio()
    {
        return $this->container['bidRaiseRatio'];
    }

    /**
     * Sets bidRaiseRatio
     *
     * @param int|mixed $bidRaiseRatio bidRaiseRatio
     *
     * @return $this
     */
    public function setBidRaiseRatio($bidRaiseRatio)
    {
        $this->container['bidRaiseRatio'] = $bidRaiseRatio;

        return $this;
    }

    /**
     * Gets exposureEstimate
     *
     * @return int|mixed
     */
    public function getExposureEstimate()
    {
        return $this->container['exposureEstimate'];
    }

    /**
     * Sets exposureEstimate
     *
     * @param int|mixed $exposureEstimate exposureEstimate
     *
     * @return $this
     */
    public function setExposureEstimate($exposureEstimate)
    {
        $this->container['exposureEstimate'] = $exposureEstimate;

        return $this;
    }

    /**
     * Gets exposureRaiseRatio
     *
     * @return int|mixed
     */
    public function getExposureRaiseRatio()
    {
        return $this->container['exposureRaiseRatio'];
    }

    /**
     * Sets exposureRaiseRatio
     *
     * @param int|mixed $exposureRaiseRatio exposureRaiseRatio
     *
     * @return $this
     */
    public function setExposureRaiseRatio($exposureRaiseRatio)
    {
        $this->container['exposureRaiseRatio'] = $exposureRaiseRatio;

        return $this;
    }

    /**
     * Gets bidModified
     *
     * @return bool|mixed
     */
    public function getBidModified()
    {
        return $this->container['bidModified'];
    }

    /**
     * Sets bidModified
     *
     * @param bool|mixed $bidModified bidModified
     *
     * @return $this
     */
    public function setBidModified($bidModified)
    {
        $this->container['bidModified'] = $bidModified;

        return $this;
    }

    /**
     * Gets deepBidModified
     *
     * @return bool|mixed
     */
    public function getDeepBidModified()
    {
        return $this->container['deepBidModified'];
    }

    /**
     * Sets deepBidModified
     *
     * @param bool|mixed $deepBidModified deepBidModified
     *
     * @return $this
     */
    public function setDeepBidModified($deepBidModified)
    {
        $this->container['deepBidModified'] = $deepBidModified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


