<?php
/**
 * ElementRejectDetailInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZzyLsg\TencentAds\Model;

use \ArrayAccess;
use \ZzyLsg\TencentAds\ObjectSerializer;

/**
 * ElementRejectDetailInfo Class Doc Comment
 *
 * @category Class
 * @description 元素拒绝原因详情
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ElementRejectDetailInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'element_reject_detail_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'elementName' => 'string',
        'elementValue' => 'string',
        'elementType' => 'string',
        'reason' => 'string',
        'caseDoc' => 'string',
        'caseContent' => 'string',
        'rejectInfoLocation' => '\TencentAds\Model\RejectInfoLocation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'elementName' => null,
        'elementValue' => null,
        'elementType' => null,
        'reason' => null,
        'caseDoc' => null,
        'caseContent' => null,
        'rejectInfoLocation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'elementName' => 'element_name',
        'elementValue' => 'element_value',
        'elementType' => 'element_type',
        'reason' => 'reason',
        'caseDoc' => 'case_doc',
        'caseContent' => 'case_content',
        'rejectInfoLocation' => 'reject_info_location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'elementName' => 'setElementName',
        'elementValue' => 'setElementValue',
        'elementType' => 'setElementType',
        'reason' => 'setReason',
        'caseDoc' => 'setCaseDoc',
        'caseContent' => 'setCaseContent',
        'rejectInfoLocation' => 'setRejectInfoLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'elementName' => 'getElementName',
        'elementValue' => 'getElementValue',
        'elementType' => 'getElementType',
        'reason' => 'getReason',
        'caseDoc' => 'getCaseDoc',
        'caseContent' => 'getCaseContent',
        'rejectInfoLocation' => 'getRejectInfoLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['elementName'] = isset($data['elementName']) ? $data['elementName'] : null;
        $this->container['elementValue'] = isset($data['elementValue']) ? $data['elementValue'] : null;
        $this->container['elementType'] = isset($data['elementType']) ? $data['elementType'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['caseDoc'] = isset($data['caseDoc']) ? $data['caseDoc'] : null;
        $this->container['caseContent'] = isset($data['caseContent']) ? $data['caseContent'] : null;
        $this->container['rejectInfoLocation'] = isset($data['rejectInfoLocation']) ? $data['rejectInfoLocation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets elementName
     *
     * @return string|mixed
     */
    public function getElementName()
    {
        return $this->container['elementName'];
    }

    /**
     * Sets elementName
     *
     * @param string|mixed $elementName elementName
     *
     * @return $this
     */
    public function setElementName($elementName)
    {
        $this->container['elementName'] = $elementName;

        return $this;
    }

    /**
     * Gets elementValue
     *
     * @return string|mixed
     */
    public function getElementValue()
    {
        return $this->container['elementValue'];
    }

    /**
     * Sets elementValue
     *
     * @param string|mixed $elementValue elementValue
     *
     * @return $this
     */
    public function setElementValue($elementValue)
    {
        $this->container['elementValue'] = $elementValue;

        return $this;
    }

    /**
     * Gets elementType
     *
     * @return string|mixed
     */
    public function getElementType()
    {
        return $this->container['elementType'];
    }

    /**
     * Sets elementType
     *
     * @param string|mixed $elementType elementType
     *
     * @return $this
     */
    public function setElementType($elementType)
    {
        $this->container['elementType'] = $elementType;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|mixed
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|mixed $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets caseDoc
     *
     * @return string|mixed
     */
    public function getCaseDoc()
    {
        return $this->container['caseDoc'];
    }

    /**
     * Sets caseDoc
     *
     * @param string|mixed $caseDoc caseDoc
     *
     * @return $this
     */
    public function setCaseDoc($caseDoc)
    {
        $this->container['caseDoc'] = $caseDoc;

        return $this;
    }

    /**
     * Gets caseContent
     *
     * @return string|mixed
     */
    public function getCaseContent()
    {
        return $this->container['caseContent'];
    }

    /**
     * Sets caseContent
     *
     * @param string|mixed $caseContent caseContent
     *
     * @return $this
     */
    public function setCaseContent($caseContent)
    {
        $this->container['caseContent'] = $caseContent;

        return $this;
    }

    /**
     * Gets rejectInfoLocation
     *
     * @return \TencentAds\Model\RejectInfoLocation[]|mixed
     */
    public function getRejectInfoLocation()
    {
        return $this->container['rejectInfoLocation'];
    }

    /**
     * Sets rejectInfoLocation
     *
     * @param \TencentAds\Model\RejectInfoLocation[]|mixed $rejectInfoLocation rejectInfoLocation
     *
     * @return $this
     */
    public function setRejectInfoLocation($rejectInfoLocation)
    {
        $this->container['rejectInfoLocation'] = $rejectInfoLocation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


