<?php
/**
 * FloatingZone
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZzyLsg\TencentAds\Model;

use \ArrayAccess;
use \ZzyLsg\TencentAds\ObjectSerializer;

/**
 * FloatingZone Class Doc Comment
 *
 * @category Class
 * @description 浮层卡片创意内容
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FloatingZone implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'floating_zone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'floatingZoneSwitch' => 'bool',
        'floatingZoneImageId' => 'string',
        'floatingZoneName' => 'string',
        'floatingZoneDesc' => 'string',
        'floatingZoneButtonText' => 'string',
        'floatingZoneType' => '\TencentAds\Model\FloatingZoneType',
        'floatingZoneSingleImageId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'floatingZoneSwitch' => null,
        'floatingZoneImageId' => null,
        'floatingZoneName' => null,
        'floatingZoneDesc' => null,
        'floatingZoneButtonText' => null,
        'floatingZoneType' => null,
        'floatingZoneSingleImageId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'floatingZoneSwitch' => 'floating_zone_switch',
        'floatingZoneImageId' => 'floating_zone_image_id',
        'floatingZoneName' => 'floating_zone_name',
        'floatingZoneDesc' => 'floating_zone_desc',
        'floatingZoneButtonText' => 'floating_zone_button_text',
        'floatingZoneType' => 'floating_zone_type',
        'floatingZoneSingleImageId' => 'floating_zone_single_image_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'floatingZoneSwitch' => 'setFloatingZoneSwitch',
        'floatingZoneImageId' => 'setFloatingZoneImageId',
        'floatingZoneName' => 'setFloatingZoneName',
        'floatingZoneDesc' => 'setFloatingZoneDesc',
        'floatingZoneButtonText' => 'setFloatingZoneButtonText',
        'floatingZoneType' => 'setFloatingZoneType',
        'floatingZoneSingleImageId' => 'setFloatingZoneSingleImageId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'floatingZoneSwitch' => 'getFloatingZoneSwitch',
        'floatingZoneImageId' => 'getFloatingZoneImageId',
        'floatingZoneName' => 'getFloatingZoneName',
        'floatingZoneDesc' => 'getFloatingZoneDesc',
        'floatingZoneButtonText' => 'getFloatingZoneButtonText',
        'floatingZoneType' => 'getFloatingZoneType',
        'floatingZoneSingleImageId' => 'getFloatingZoneSingleImageId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['floatingZoneSwitch'] = isset($data['floatingZoneSwitch']) ? $data['floatingZoneSwitch'] : null;
        $this->container['floatingZoneImageId'] = isset($data['floatingZoneImageId']) ? $data['floatingZoneImageId'] : null;
        $this->container['floatingZoneName'] = isset($data['floatingZoneName']) ? $data['floatingZoneName'] : null;
        $this->container['floatingZoneDesc'] = isset($data['floatingZoneDesc']) ? $data['floatingZoneDesc'] : null;
        $this->container['floatingZoneButtonText'] = isset($data['floatingZoneButtonText']) ? $data['floatingZoneButtonText'] : null;
        $this->container['floatingZoneType'] = isset($data['floatingZoneType']) ? $data['floatingZoneType'] : null;
        $this->container['floatingZoneSingleImageId'] = isset($data['floatingZoneSingleImageId']) ? $data['floatingZoneSingleImageId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets floatingZoneSwitch
     *
     * @return bool|mixed
     */
    public function getFloatingZoneSwitch()
    {
        return $this->container['floatingZoneSwitch'];
    }

    /**
     * Sets floatingZoneSwitch
     *
     * @param bool|mixed $floatingZoneSwitch floatingZoneSwitch
     *
     * @return $this
     */
    public function setFloatingZoneSwitch($floatingZoneSwitch)
    {
        $this->container['floatingZoneSwitch'] = $floatingZoneSwitch;

        return $this;
    }

    /**
     * Gets floatingZoneImageId
     *
     * @return string|mixed
     */
    public function getFloatingZoneImageId()
    {
        return $this->container['floatingZoneImageId'];
    }

    /**
     * Sets floatingZoneImageId
     *
     * @param string|mixed $floatingZoneImageId floatingZoneImageId
     *
     * @return $this
     */
    public function setFloatingZoneImageId($floatingZoneImageId)
    {
        $this->container['floatingZoneImageId'] = $floatingZoneImageId;

        return $this;
    }

    /**
     * Gets floatingZoneName
     *
     * @return string|mixed
     */
    public function getFloatingZoneName()
    {
        return $this->container['floatingZoneName'];
    }

    /**
     * Sets floatingZoneName
     *
     * @param string|mixed $floatingZoneName floatingZoneName
     *
     * @return $this
     */
    public function setFloatingZoneName($floatingZoneName)
    {
        $this->container['floatingZoneName'] = $floatingZoneName;

        return $this;
    }

    /**
     * Gets floatingZoneDesc
     *
     * @return string|mixed
     */
    public function getFloatingZoneDesc()
    {
        return $this->container['floatingZoneDesc'];
    }

    /**
     * Sets floatingZoneDesc
     *
     * @param string|mixed $floatingZoneDesc floatingZoneDesc
     *
     * @return $this
     */
    public function setFloatingZoneDesc($floatingZoneDesc)
    {
        $this->container['floatingZoneDesc'] = $floatingZoneDesc;

        return $this;
    }

    /**
     * Gets floatingZoneButtonText
     *
     * @return string|mixed
     */
    public function getFloatingZoneButtonText()
    {
        return $this->container['floatingZoneButtonText'];
    }

    /**
     * Sets floatingZoneButtonText
     *
     * @param string|mixed $floatingZoneButtonText floatingZoneButtonText
     *
     * @return $this
     */
    public function setFloatingZoneButtonText($floatingZoneButtonText)
    {
        $this->container['floatingZoneButtonText'] = $floatingZoneButtonText;

        return $this;
    }

    /**
     * Gets floatingZoneType
     *
     * @return \TencentAds\Model\FloatingZoneType|mixed
     */
    public function getFloatingZoneType()
    {
        return $this->container['floatingZoneType'];
    }

    /**
     * Sets floatingZoneType
     *
     * @param \TencentAds\Model\FloatingZoneType|mixed $floatingZoneType floatingZoneType
     *
     * @return $this
     */
    public function setFloatingZoneType($floatingZoneType)
    {
        $this->container['floatingZoneType'] = $floatingZoneType;

        return $this;
    }

    /**
     * Gets floatingZoneSingleImageId
     *
     * @return string|mixed
     */
    public function getFloatingZoneSingleImageId()
    {
        return $this->container['floatingZoneSingleImageId'];
    }

    /**
     * Sets floatingZoneSingleImageId
     *
     * @param string|mixed $floatingZoneSingleImageId floatingZoneSingleImageId
     *
     * @return $this
     */
    public function setFloatingZoneSingleImageId($floatingZoneSingleImageId)
    {
        $this->container['floatingZoneSingleImageId'] = $floatingZoneSingleImageId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


