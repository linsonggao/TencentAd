<?php
/**
 * AdCreativeShopImageStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZzyLsg\TencentAds\Model;

use \ArrayAccess;
use \ZzyLsg\TencentAds\ObjectSerializer;

/**
 * AdCreativeShopImageStruct Class Doc Comment
 *
 * @category Class
 * @description 卖点图
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdCreativeShopImageStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ad_creative_shop_image_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shopImageSwitch' => 'bool',
        'dynamicShopImageSwitch' => 'bool',
        'shopImageId' => 'string',
        'shopImageTitle' => 'string',
        'shopImageDescription' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shopImageSwitch' => null,
        'dynamicShopImageSwitch' => null,
        'shopImageId' => null,
        'shopImageTitle' => null,
        'shopImageDescription' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shopImageSwitch' => 'shop_image_switch',
        'dynamicShopImageSwitch' => 'dynamic_shop_image_switch',
        'shopImageId' => 'shop_image_id',
        'shopImageTitle' => 'shop_image_title',
        'shopImageDescription' => 'shop_image_description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shopImageSwitch' => 'setShopImageSwitch',
        'dynamicShopImageSwitch' => 'setDynamicShopImageSwitch',
        'shopImageId' => 'setShopImageId',
        'shopImageTitle' => 'setShopImageTitle',
        'shopImageDescription' => 'setShopImageDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shopImageSwitch' => 'getShopImageSwitch',
        'dynamicShopImageSwitch' => 'getDynamicShopImageSwitch',
        'shopImageId' => 'getShopImageId',
        'shopImageTitle' => 'getShopImageTitle',
        'shopImageDescription' => 'getShopImageDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shopImageSwitch'] = isset($data['shopImageSwitch']) ? $data['shopImageSwitch'] : null;
        $this->container['dynamicShopImageSwitch'] = isset($data['dynamicShopImageSwitch']) ? $data['dynamicShopImageSwitch'] : null;
        $this->container['shopImageId'] = isset($data['shopImageId']) ? $data['shopImageId'] : null;
        $this->container['shopImageTitle'] = isset($data['shopImageTitle']) ? $data['shopImageTitle'] : null;
        $this->container['shopImageDescription'] = isset($data['shopImageDescription']) ? $data['shopImageDescription'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shopImageSwitch
     *
     * @return bool|mixed
     */
    public function getShopImageSwitch()
    {
        return $this->container['shopImageSwitch'];
    }

    /**
     * Sets shopImageSwitch
     *
     * @param bool|mixed $shopImageSwitch shopImageSwitch
     *
     * @return $this
     */
    public function setShopImageSwitch($shopImageSwitch)
    {
        $this->container['shopImageSwitch'] = $shopImageSwitch;

        return $this;
    }

    /**
     * Gets dynamicShopImageSwitch
     *
     * @return bool|mixed
     */
    public function getDynamicShopImageSwitch()
    {
        return $this->container['dynamicShopImageSwitch'];
    }

    /**
     * Sets dynamicShopImageSwitch
     *
     * @param bool|mixed $dynamicShopImageSwitch dynamicShopImageSwitch
     *
     * @return $this
     */
    public function setDynamicShopImageSwitch($dynamicShopImageSwitch)
    {
        $this->container['dynamicShopImageSwitch'] = $dynamicShopImageSwitch;

        return $this;
    }

    /**
     * Gets shopImageId
     *
     * @return string|mixed
     */
    public function getShopImageId()
    {
        return $this->container['shopImageId'];
    }

    /**
     * Sets shopImageId
     *
     * @param string|mixed $shopImageId shopImageId
     *
     * @return $this
     */
    public function setShopImageId($shopImageId)
    {
        $this->container['shopImageId'] = $shopImageId;

        return $this;
    }

    /**
     * Gets shopImageTitle
     *
     * @return string|mixed
     */
    public function getShopImageTitle()
    {
        return $this->container['shopImageTitle'];
    }

    /**
     * Sets shopImageTitle
     *
     * @param string|mixed $shopImageTitle shopImageTitle
     *
     * @return $this
     */
    public function setShopImageTitle($shopImageTitle)
    {
        $this->container['shopImageTitle'] = $shopImageTitle;

        return $this;
    }

    /**
     * Gets shopImageDescription
     *
     * @return string|mixed
     */
    public function getShopImageDescription()
    {
        return $this->container['shopImageDescription'];
    }

    /**
     * Sets shopImageDescription
     *
     * @param string|mixed $shopImageDescription shopImageDescription
     *
     * @return $this
     */
    public function setShopImageDescription($shopImageDescription)
    {
        $this->container['shopImageDescription'] = $shopImageDescription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


