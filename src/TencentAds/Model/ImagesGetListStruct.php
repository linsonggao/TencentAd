<?php
/**
 * ImagesGetListStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZzyLsg\TencentAds\Model;

use \ArrayAccess;
use \ZzyLsg\TencentAds\ObjectSerializer;

/**
 * ImagesGetListStruct Class Doc Comment
 *
 * @category Class
 * @description 返回结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImagesGetListStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImagesGetListStruct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'imageId' => 'string',
        'description' => 'string',
        'sourceSignature' => 'string',
        'previewUrl' => 'string',
        'sourceType' => '\TencentAds\Model\ImageSourceType',
        'imageUsage' => '\TencentAds\Model\ImageUsage',
        'createdTime' => 'int',
        'lastModifiedTime' => 'int',
        'productCatalogId' => 'int',
        'productOuterId' => 'string',
        'sourceReferenceId' => 'string',
        'ownerAccountId' => 'string',
        'status' => '\TencentAds\Model\MediaStatusType',
        'sampleAspectRatio' => 'string',
        'width' => 'int',
        'height' => 'int',
        'fileSize' => 'int',
        'type' => '\TencentAds\Model\ImageType',
        'signature' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'imageId' => null,
        'description' => null,
        'sourceSignature' => null,
        'previewUrl' => null,
        'sourceType' => null,
        'imageUsage' => null,
        'createdTime' => 'int64',
        'lastModifiedTime' => 'int64',
        'productCatalogId' => 'int64',
        'productOuterId' => null,
        'sourceReferenceId' => null,
        'ownerAccountId' => null,
        'status' => null,
        'sampleAspectRatio' => null,
        'width' => 'int64',
        'height' => 'int64',
        'fileSize' => 'int64',
        'type' => null,
        'signature' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'imageId' => 'image_id',
        'description' => 'description',
        'sourceSignature' => 'source_signature',
        'previewUrl' => 'preview_url',
        'sourceType' => 'source_type',
        'imageUsage' => 'image_usage',
        'createdTime' => 'created_time',
        'lastModifiedTime' => 'last_modified_time',
        'productCatalogId' => 'product_catalog_id',
        'productOuterId' => 'product_outer_id',
        'sourceReferenceId' => 'source_reference_id',
        'ownerAccountId' => 'owner_account_id',
        'status' => 'status',
        'sampleAspectRatio' => 'sample_aspect_ratio',
        'width' => 'width',
        'height' => 'height',
        'fileSize' => 'file_size',
        'type' => 'type',
        'signature' => 'signature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'imageId' => 'setImageId',
        'description' => 'setDescription',
        'sourceSignature' => 'setSourceSignature',
        'previewUrl' => 'setPreviewUrl',
        'sourceType' => 'setSourceType',
        'imageUsage' => 'setImageUsage',
        'createdTime' => 'setCreatedTime',
        'lastModifiedTime' => 'setLastModifiedTime',
        'productCatalogId' => 'setProductCatalogId',
        'productOuterId' => 'setProductOuterId',
        'sourceReferenceId' => 'setSourceReferenceId',
        'ownerAccountId' => 'setOwnerAccountId',
        'status' => 'setStatus',
        'sampleAspectRatio' => 'setSampleAspectRatio',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'fileSize' => 'setFileSize',
        'type' => 'setType',
        'signature' => 'setSignature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'imageId' => 'getImageId',
        'description' => 'getDescription',
        'sourceSignature' => 'getSourceSignature',
        'previewUrl' => 'getPreviewUrl',
        'sourceType' => 'getSourceType',
        'imageUsage' => 'getImageUsage',
        'createdTime' => 'getCreatedTime',
        'lastModifiedTime' => 'getLastModifiedTime',
        'productCatalogId' => 'getProductCatalogId',
        'productOuterId' => 'getProductOuterId',
        'sourceReferenceId' => 'getSourceReferenceId',
        'ownerAccountId' => 'getOwnerAccountId',
        'status' => 'getStatus',
        'sampleAspectRatio' => 'getSampleAspectRatio',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'fileSize' => 'getFileSize',
        'type' => 'getType',
        'signature' => 'getSignature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['imageId'] = isset($data['imageId']) ? $data['imageId'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['sourceSignature'] = isset($data['sourceSignature']) ? $data['sourceSignature'] : null;
        $this->container['previewUrl'] = isset($data['previewUrl']) ? $data['previewUrl'] : null;
        $this->container['sourceType'] = isset($data['sourceType']) ? $data['sourceType'] : null;
        $this->container['imageUsage'] = isset($data['imageUsage']) ? $data['imageUsage'] : null;
        $this->container['createdTime'] = isset($data['createdTime']) ? $data['createdTime'] : null;
        $this->container['lastModifiedTime'] = isset($data['lastModifiedTime']) ? $data['lastModifiedTime'] : null;
        $this->container['productCatalogId'] = isset($data['productCatalogId']) ? $data['productCatalogId'] : null;
        $this->container['productOuterId'] = isset($data['productOuterId']) ? $data['productOuterId'] : null;
        $this->container['sourceReferenceId'] = isset($data['sourceReferenceId']) ? $data['sourceReferenceId'] : null;
        $this->container['ownerAccountId'] = isset($data['ownerAccountId']) ? $data['ownerAccountId'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sampleAspectRatio'] = isset($data['sampleAspectRatio']) ? $data['sampleAspectRatio'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['fileSize'] = isset($data['fileSize']) ? $data['fileSize'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['signature'] = isset($data['signature']) ? $data['signature'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets imageId
     *
     * @return string|mixed
     */
    public function getImageId()
    {
        return $this->container['imageId'];
    }

    /**
     * Sets imageId
     *
     * @param string|mixed $imageId imageId
     *
     * @return $this
     */
    public function setImageId($imageId)
    {
        $this->container['imageId'] = $imageId;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|mixed
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|mixed $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sourceSignature
     *
     * @return string|mixed
     */
    public function getSourceSignature()
    {
        return $this->container['sourceSignature'];
    }

    /**
     * Sets sourceSignature
     *
     * @param string|mixed $sourceSignature sourceSignature
     *
     * @return $this
     */
    public function setSourceSignature($sourceSignature)
    {
        $this->container['sourceSignature'] = $sourceSignature;

        return $this;
    }

    /**
     * Gets previewUrl
     *
     * @return string|mixed
     */
    public function getPreviewUrl()
    {
        return $this->container['previewUrl'];
    }

    /**
     * Sets previewUrl
     *
     * @param string|mixed $previewUrl previewUrl
     *
     * @return $this
     */
    public function setPreviewUrl($previewUrl)
    {
        $this->container['previewUrl'] = $previewUrl;

        return $this;
    }

    /**
     * Gets sourceType
     *
     * @return \TencentAds\Model\ImageSourceType|mixed
     */
    public function getSourceType()
    {
        return $this->container['sourceType'];
    }

    /**
     * Sets sourceType
     *
     * @param \TencentAds\Model\ImageSourceType|mixed $sourceType sourceType
     *
     * @return $this
     */
    public function setSourceType($sourceType)
    {
        $this->container['sourceType'] = $sourceType;

        return $this;
    }

    /**
     * Gets imageUsage
     *
     * @return \TencentAds\Model\ImageUsage|mixed
     */
    public function getImageUsage()
    {
        return $this->container['imageUsage'];
    }

    /**
     * Sets imageUsage
     *
     * @param \TencentAds\Model\ImageUsage|mixed $imageUsage imageUsage
     *
     * @return $this
     */
    public function setImageUsage($imageUsage)
    {
        $this->container['imageUsage'] = $imageUsage;

        return $this;
    }

    /**
     * Gets createdTime
     *
     * @return int|mixed
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     *
     * @param int|mixed $createdTime createdTime
     *
     * @return $this
     */
    public function setCreatedTime($createdTime)
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }

    /**
     * Gets lastModifiedTime
     *
     * @return int|mixed
     */
    public function getLastModifiedTime()
    {
        return $this->container['lastModifiedTime'];
    }

    /**
     * Sets lastModifiedTime
     *
     * @param int|mixed $lastModifiedTime lastModifiedTime
     *
     * @return $this
     */
    public function setLastModifiedTime($lastModifiedTime)
    {
        $this->container['lastModifiedTime'] = $lastModifiedTime;

        return $this;
    }

    /**
     * Gets productCatalogId
     *
     * @return int|mixed
     */
    public function getProductCatalogId()
    {
        return $this->container['productCatalogId'];
    }

    /**
     * Sets productCatalogId
     *
     * @param int|mixed $productCatalogId productCatalogId
     *
     * @return $this
     */
    public function setProductCatalogId($productCatalogId)
    {
        $this->container['productCatalogId'] = $productCatalogId;

        return $this;
    }

    /**
     * Gets productOuterId
     *
     * @return string|mixed
     */
    public function getProductOuterId()
    {
        return $this->container['productOuterId'];
    }

    /**
     * Sets productOuterId
     *
     * @param string|mixed $productOuterId productOuterId
     *
     * @return $this
     */
    public function setProductOuterId($productOuterId)
    {
        $this->container['productOuterId'] = $productOuterId;

        return $this;
    }

    /**
     * Gets sourceReferenceId
     *
     * @return string|mixed
     */
    public function getSourceReferenceId()
    {
        return $this->container['sourceReferenceId'];
    }

    /**
     * Sets sourceReferenceId
     *
     * @param string|mixed $sourceReferenceId sourceReferenceId
     *
     * @return $this
     */
    public function setSourceReferenceId($sourceReferenceId)
    {
        $this->container['sourceReferenceId'] = $sourceReferenceId;

        return $this;
    }

    /**
     * Gets ownerAccountId
     *
     * @return string|mixed
     */
    public function getOwnerAccountId()
    {
        return $this->container['ownerAccountId'];
    }

    /**
     * Sets ownerAccountId
     *
     * @param string|mixed $ownerAccountId ownerAccountId
     *
     * @return $this
     */
    public function setOwnerAccountId($ownerAccountId)
    {
        $this->container['ownerAccountId'] = $ownerAccountId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \TencentAds\Model\MediaStatusType|mixed
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \TencentAds\Model\MediaStatusType|mixed $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sampleAspectRatio
     *
     * @return string|mixed
     */
    public function getSampleAspectRatio()
    {
        return $this->container['sampleAspectRatio'];
    }

    /**
     * Sets sampleAspectRatio
     *
     * @param string|mixed $sampleAspectRatio sampleAspectRatio
     *
     * @return $this
     */
    public function setSampleAspectRatio($sampleAspectRatio)
    {
        $this->container['sampleAspectRatio'] = $sampleAspectRatio;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|mixed
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|mixed $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|mixed
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|mixed $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets fileSize
     *
     * @return int|mixed
     */
    public function getFileSize()
    {
        return $this->container['fileSize'];
    }

    /**
     * Sets fileSize
     *
     * @param int|mixed $fileSize fileSize
     *
     * @return $this
     */
    public function setFileSize($fileSize)
    {
        $this->container['fileSize'] = $fileSize;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \TencentAds\Model\ImageType|mixed
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \TencentAds\Model\ImageType|mixed $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|mixed
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|mixed $signature signature
     *
     * @return $this
     */
    public function setSignature($signature)
    {
        $this->container['signature'] = $signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


