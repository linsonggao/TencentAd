<?php
/**
 * PageElementsSpecListStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZzyLsg\TencentAds\Model;

use \ArrayAccess;
use \ZzyLsg\TencentAds\ObjectSerializer;

/**
 * PageElementsSpecListStruct Class Doc Comment
 *
 * @category Class
 * @description 页面组件列表, 页面顺序与生成的原生页的顺序一致
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PageElementsSpecListStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'page_elements_spec_list_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'elementType' => '\TencentAds\Model\CanvasPageElementType',
        'topImageSpec' => '\TencentAds\Model\TopImageSpec',
        'topSliderSpec' => '\TencentAds\Model\TopSliderSpec',
        'topVideoSpec' => '\TencentAds\Model\TopVideoSpec',
        'imageSpec' => '\TencentAds\Model\ImageSpec',
        'sliderSpec' => '\TencentAds\Model\SliderSpec',
        'videoSpec' => '\TencentAds\Model\VideoSpec',
        'textSpec' => '\TencentAds\Model\TextSpec',
        'appDownloadSpec' => '\TencentAds\Model\CanvasAppDownloadSpecType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'elementType' => null,
        'topImageSpec' => null,
        'topSliderSpec' => null,
        'topVideoSpec' => null,
        'imageSpec' => null,
        'sliderSpec' => null,
        'videoSpec' => null,
        'textSpec' => null,
        'appDownloadSpec' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'elementType' => 'element_type',
        'topImageSpec' => 'top_image_spec',
        'topSliderSpec' => 'top_slider_spec',
        'topVideoSpec' => 'top_video_spec',
        'imageSpec' => 'image_spec',
        'sliderSpec' => 'slider_spec',
        'videoSpec' => 'video_spec',
        'textSpec' => 'text_spec',
        'appDownloadSpec' => 'app_download_spec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'elementType' => 'setElementType',
        'topImageSpec' => 'setTopImageSpec',
        'topSliderSpec' => 'setTopSliderSpec',
        'topVideoSpec' => 'setTopVideoSpec',
        'imageSpec' => 'setImageSpec',
        'sliderSpec' => 'setSliderSpec',
        'videoSpec' => 'setVideoSpec',
        'textSpec' => 'setTextSpec',
        'appDownloadSpec' => 'setAppDownloadSpec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'elementType' => 'getElementType',
        'topImageSpec' => 'getTopImageSpec',
        'topSliderSpec' => 'getTopSliderSpec',
        'topVideoSpec' => 'getTopVideoSpec',
        'imageSpec' => 'getImageSpec',
        'sliderSpec' => 'getSliderSpec',
        'videoSpec' => 'getVideoSpec',
        'textSpec' => 'getTextSpec',
        'appDownloadSpec' => 'getAppDownloadSpec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['elementType'] = isset($data['elementType']) ? $data['elementType'] : null;
        $this->container['topImageSpec'] = isset($data['topImageSpec']) ? $data['topImageSpec'] : null;
        $this->container['topSliderSpec'] = isset($data['topSliderSpec']) ? $data['topSliderSpec'] : null;
        $this->container['topVideoSpec'] = isset($data['topVideoSpec']) ? $data['topVideoSpec'] : null;
        $this->container['imageSpec'] = isset($data['imageSpec']) ? $data['imageSpec'] : null;
        $this->container['sliderSpec'] = isset($data['sliderSpec']) ? $data['sliderSpec'] : null;
        $this->container['videoSpec'] = isset($data['videoSpec']) ? $data['videoSpec'] : null;
        $this->container['textSpec'] = isset($data['textSpec']) ? $data['textSpec'] : null;
        $this->container['appDownloadSpec'] = isset($data['appDownloadSpec']) ? $data['appDownloadSpec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets elementType
     *
     * @return \TencentAds\Model\CanvasPageElementType|mixed
     */
    public function getElementType()
    {
        return $this->container['elementType'];
    }

    /**
     * Sets elementType
     *
     * @param \TencentAds\Model\CanvasPageElementType|mixed $elementType elementType
     *
     * @return $this
     */
    public function setElementType($elementType)
    {
        $this->container['elementType'] = $elementType;

        return $this;
    }

    /**
     * Gets topImageSpec
     *
     * @return \TencentAds\Model\TopImageSpec|mixed
     */
    public function getTopImageSpec()
    {
        return $this->container['topImageSpec'];
    }

    /**
     * Sets topImageSpec
     *
     * @param \TencentAds\Model\TopImageSpec|mixed $topImageSpec topImageSpec
     *
     * @return $this
     */
    public function setTopImageSpec($topImageSpec)
    {
        $this->container['topImageSpec'] = $topImageSpec;

        return $this;
    }

    /**
     * Gets topSliderSpec
     *
     * @return \TencentAds\Model\TopSliderSpec|mixed
     */
    public function getTopSliderSpec()
    {
        return $this->container['topSliderSpec'];
    }

    /**
     * Sets topSliderSpec
     *
     * @param \TencentAds\Model\TopSliderSpec|mixed $topSliderSpec topSliderSpec
     *
     * @return $this
     */
    public function setTopSliderSpec($topSliderSpec)
    {
        $this->container['topSliderSpec'] = $topSliderSpec;

        return $this;
    }

    /**
     * Gets topVideoSpec
     *
     * @return \TencentAds\Model\TopVideoSpec|mixed
     */
    public function getTopVideoSpec()
    {
        return $this->container['topVideoSpec'];
    }

    /**
     * Sets topVideoSpec
     *
     * @param \TencentAds\Model\TopVideoSpec|mixed $topVideoSpec topVideoSpec
     *
     * @return $this
     */
    public function setTopVideoSpec($topVideoSpec)
    {
        $this->container['topVideoSpec'] = $topVideoSpec;

        return $this;
    }

    /**
     * Gets imageSpec
     *
     * @return \TencentAds\Model\ImageSpec|mixed
     */
    public function getImageSpec()
    {
        return $this->container['imageSpec'];
    }

    /**
     * Sets imageSpec
     *
     * @param \TencentAds\Model\ImageSpec|mixed $imageSpec imageSpec
     *
     * @return $this
     */
    public function setImageSpec($imageSpec)
    {
        $this->container['imageSpec'] = $imageSpec;

        return $this;
    }

    /**
     * Gets sliderSpec
     *
     * @return \TencentAds\Model\SliderSpec|mixed
     */
    public function getSliderSpec()
    {
        return $this->container['sliderSpec'];
    }

    /**
     * Sets sliderSpec
     *
     * @param \TencentAds\Model\SliderSpec|mixed $sliderSpec sliderSpec
     *
     * @return $this
     */
    public function setSliderSpec($sliderSpec)
    {
        $this->container['sliderSpec'] = $sliderSpec;

        return $this;
    }

    /**
     * Gets videoSpec
     *
     * @return \TencentAds\Model\VideoSpec|mixed
     */
    public function getVideoSpec()
    {
        return $this->container['videoSpec'];
    }

    /**
     * Sets videoSpec
     *
     * @param \TencentAds\Model\VideoSpec|mixed $videoSpec videoSpec
     *
     * @return $this
     */
    public function setVideoSpec($videoSpec)
    {
        $this->container['videoSpec'] = $videoSpec;

        return $this;
    }

    /**
     * Gets textSpec
     *
     * @return \TencentAds\Model\TextSpec|mixed
     */
    public function getTextSpec()
    {
        return $this->container['textSpec'];
    }

    /**
     * Sets textSpec
     *
     * @param \TencentAds\Model\TextSpec|mixed $textSpec textSpec
     *
     * @return $this
     */
    public function setTextSpec($textSpec)
    {
        $this->container['textSpec'] = $textSpec;

        return $this;
    }

    /**
     * Gets appDownloadSpec
     *
     * @return \TencentAds\Model\CanvasAppDownloadSpecType|mixed
     */
    public function getAppDownloadSpec()
    {
        return $this->container['appDownloadSpec'];
    }

    /**
     * Sets appDownloadSpec
     *
     * @param \TencentAds\Model\CanvasAppDownloadSpecType|mixed $appDownloadSpec appDownloadSpec
     *
     * @return $this
     */
    public function setAppDownloadSpec($appDownloadSpec)
    {
        $this->container['appDownloadSpec'] = $appDownloadSpec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


