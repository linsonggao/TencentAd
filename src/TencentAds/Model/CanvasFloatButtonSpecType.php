<?php
/**
 * CanvasFloatButtonSpecType
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ZzyLsg\TencentAds\Model;

use \ArrayAccess;
use \ZzyLsg\TencentAds\ObjectSerializer;

/**
 * CanvasFloatButtonSpecType Class Doc Comment
 *
 * @category Class
 * @description 悬浮组件元素
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CanvasFloatButtonSpecType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'canvas_float_button_spec_type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'styleType' => 'int',
        'imageId' => 'string',
        'title' => 'string',
        'titleColor' => 'string',
        'desc' => 'string',
        'descColor' => 'string',
        'appearType' => 'int',
        'disappearType' => 'int',
        'forbidPageList' => 'int[]',
        'elementType' => '\TencentAds\Model\CanvasFloatElementType',
        'appDownloadSpec' => '\TencentAds\Model\FloatAppDownloadSpec'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'styleType' => 'int64',
        'imageId' => null,
        'title' => null,
        'titleColor' => null,
        'desc' => null,
        'descColor' => null,
        'appearType' => 'int64',
        'disappearType' => 'int64',
        'forbidPageList' => 'int64',
        'elementType' => null,
        'appDownloadSpec' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'styleType' => 'style_type',
        'imageId' => 'image_id',
        'title' => 'title',
        'titleColor' => 'title_color',
        'desc' => 'desc',
        'descColor' => 'desc_color',
        'appearType' => 'appear_type',
        'disappearType' => 'disappear_type',
        'forbidPageList' => 'forbid_page_list',
        'elementType' => 'element_type',
        'appDownloadSpec' => 'app_download_spec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'styleType' => 'setStyleType',
        'imageId' => 'setImageId',
        'title' => 'setTitle',
        'titleColor' => 'setTitleColor',
        'desc' => 'setDesc',
        'descColor' => 'setDescColor',
        'appearType' => 'setAppearType',
        'disappearType' => 'setDisappearType',
        'forbidPageList' => 'setForbidPageList',
        'elementType' => 'setElementType',
        'appDownloadSpec' => 'setAppDownloadSpec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'styleType' => 'getStyleType',
        'imageId' => 'getImageId',
        'title' => 'getTitle',
        'titleColor' => 'getTitleColor',
        'desc' => 'getDesc',
        'descColor' => 'getDescColor',
        'appearType' => 'getAppearType',
        'disappearType' => 'getDisappearType',
        'forbidPageList' => 'getForbidPageList',
        'elementType' => 'getElementType',
        'appDownloadSpec' => 'getAppDownloadSpec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['styleType'] = isset($data['styleType']) ? $data['styleType'] : null;
        $this->container['imageId'] = isset($data['imageId']) ? $data['imageId'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['titleColor'] = isset($data['titleColor']) ? $data['titleColor'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['descColor'] = isset($data['descColor']) ? $data['descColor'] : null;
        $this->container['appearType'] = isset($data['appearType']) ? $data['appearType'] : null;
        $this->container['disappearType'] = isset($data['disappearType']) ? $data['disappearType'] : null;
        $this->container['forbidPageList'] = isset($data['forbidPageList']) ? $data['forbidPageList'] : null;
        $this->container['elementType'] = isset($data['elementType']) ? $data['elementType'] : null;
        $this->container['appDownloadSpec'] = isset($data['appDownloadSpec']) ? $data['appDownloadSpec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets styleType
     *
     * @return int|mixed
     */
    public function getStyleType()
    {
        return $this->container['styleType'];
    }

    /**
     * Sets styleType
     *
     * @param int|mixed $styleType styleType
     *
     * @return $this
     */
    public function setStyleType($styleType)
    {
        $this->container['styleType'] = $styleType;

        return $this;
    }

    /**
     * Gets imageId
     *
     * @return string|mixed
     */
    public function getImageId()
    {
        return $this->container['imageId'];
    }

    /**
     * Sets imageId
     *
     * @param string|mixed $imageId imageId
     *
     * @return $this
     */
    public function setImageId($imageId)
    {
        $this->container['imageId'] = $imageId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|mixed
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|mixed $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets titleColor
     *
     * @return string|mixed
     */
    public function getTitleColor()
    {
        return $this->container['titleColor'];
    }

    /**
     * Sets titleColor
     *
     * @param string|mixed $titleColor titleColor
     *
     * @return $this
     */
    public function setTitleColor($titleColor)
    {
        $this->container['titleColor'] = $titleColor;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string|mixed
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string|mixed $desc desc
     *
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets descColor
     *
     * @return string|mixed
     */
    public function getDescColor()
    {
        return $this->container['descColor'];
    }

    /**
     * Sets descColor
     *
     * @param string|mixed $descColor descColor
     *
     * @return $this
     */
    public function setDescColor($descColor)
    {
        $this->container['descColor'] = $descColor;

        return $this;
    }

    /**
     * Gets appearType
     *
     * @return int|mixed
     */
    public function getAppearType()
    {
        return $this->container['appearType'];
    }

    /**
     * Sets appearType
     *
     * @param int|mixed $appearType appearType
     *
     * @return $this
     */
    public function setAppearType($appearType)
    {
        $this->container['appearType'] = $appearType;

        return $this;
    }

    /**
     * Gets disappearType
     *
     * @return int|mixed
     */
    public function getDisappearType()
    {
        return $this->container['disappearType'];
    }

    /**
     * Sets disappearType
     *
     * @param int|mixed $disappearType disappearType
     *
     * @return $this
     */
    public function setDisappearType($disappearType)
    {
        $this->container['disappearType'] = $disappearType;

        return $this;
    }

    /**
     * Gets forbidPageList
     *
     * @return int[]|mixed
     */
    public function getForbidPageList()
    {
        return $this->container['forbidPageList'];
    }

    /**
     * Sets forbidPageList
     *
     * @param int[]|mixed $forbidPageList forbidPageList
     *
     * @return $this
     */
    public function setForbidPageList($forbidPageList)
    {
        $this->container['forbidPageList'] = $forbidPageList;

        return $this;
    }

    /**
     * Gets elementType
     *
     * @return \TencentAds\Model\CanvasFloatElementType|mixed
     */
    public function getElementType()
    {
        return $this->container['elementType'];
    }

    /**
     * Sets elementType
     *
     * @param \TencentAds\Model\CanvasFloatElementType|mixed $elementType elementType
     *
     * @return $this
     */
    public function setElementType($elementType)
    {
        $this->container['elementType'] = $elementType;

        return $this;
    }

    /**
     * Gets appDownloadSpec
     *
     * @return \TencentAds\Model\FloatAppDownloadSpec|mixed
     */
    public function getAppDownloadSpec()
    {
        return $this->container['appDownloadSpec'];
    }

    /**
     * Sets appDownloadSpec
     *
     * @param \TencentAds\Model\FloatAppDownloadSpec|mixed $appDownloadSpec appDownloadSpec
     *
     * @return $this
     */
    public function setAppDownloadSpec($appDownloadSpec)
    {
        $this->container['appDownloadSpec'] = $appDownloadSpec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


